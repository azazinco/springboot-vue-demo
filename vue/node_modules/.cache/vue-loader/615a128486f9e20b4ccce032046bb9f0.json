{"remainingRequest":"E:\\ideaWorkspace\\springboot-vue-practice\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!E:\\ideaWorkspace\\springboot-vue-practice\\vue\\node_modules\\vue-video-player\\src\\player.vue?vue&type=template&id=ae2c22ec","dependencies":[{"path":"E:\\ideaWorkspace\\springboot-vue-practice\\vue\\node_modules\\vue-video-player\\src\\player.vue","mtime":1653010843988},{"path":"E:\\ideaWorkspace\\springboot-vue-practice\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650794055925},{"path":"E:\\ideaWorkspace\\springboot-vue-practice\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1650794058243},{"path":"E:\\ideaWorkspace\\springboot-vue-practice\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1650794061710},{"path":"E:\\ideaWorkspace\\springboot-vue-practice\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650794055925},{"path":"E:\\ideaWorkspace\\springboot-vue-practice\\vue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1650794060272}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0idmlkZW8tcGxheWVyIiB2LWlmPSJyZXNldGVkIj4KICAgIDx2aWRlbyBjbGFzcz0idmlkZW8tanMiIHJlZj0idmlkZW8iPjwvdmlkZW8+CiAgPC9kaXY+Cg=="},{"version":3,"sources":["E:\\ideaWorkspace\\springboot-vue-practice\\vue\\node_modules\\vue-video-player\\src\\player.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7C,CAAC,CAAC,CAAC,CAAC,CAAC","file":"E:/ideaWorkspace/springboot-vue-practice/vue/node_modules/vue-video-player/src/player.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"video-player\" v-if=\"reseted\">\n    <video class=\"video-js\" ref=\"video\"></video>\n  </div>\n</template>\n\n<script>\n  // lib\n  import _videojs from 'video.js'\n  const videojs = window.videojs || _videojs\n\n  // pollfill\n  if (typeof Object.assign != 'function') {\n    Object.defineProperty(Object, 'assign', {\n      value(target, varArgs) {\n        if (target == null) {\n          throw new TypeError('Cannot convert undefined or null to object')\n        }\n        const to = Object(target)\n        for (let index = 1; index < arguments.length; index++) {\n          const nextSource = arguments[index]\n          if (nextSource != null) {\n            for (const nextKey in nextSource) {\n              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                to[nextKey] = nextSource[nextKey]\n              }\n            }\n          }\n        }\n        return to\n      },\n      writable: true,\n      configurable: true\n    })\n  }\n\n  // as of videojs 6.6.0\n  const DEFAULT_EVENTS = [\n    'loadeddata',\n    'canplay',\n    'canplaythrough',\n    'play',\n    'pause',\n    'waiting',\n    'playing',\n    'ended',\n    'error'\n  ]\n\n  // export\n  export default {\n    name: 'video-player',\n    props: {\n      start: {\n        type: Number,\n        default: 0\n      },\n      crossOrigin: {\n        type: String,\n        default: ''\n      },\n      playsinline: {\n        type: Boolean,\n        default: false\n      },\n      customEventName: {\n        type: String,\n        default: 'statechanged'\n      },\n      options: {\n        type: Object,\n        required: true\n      },\n      events: {\n        type: Array,\n        default: () => []\n      },\n      globalOptions: {\n        type: Object,\n        default: () => ({\n          // autoplay: false,\n          controls: true,\n          // preload: 'auto',\n          // fluid: false,\n          // muted: false,\n          controlBar: {\n            remainingTimeDisplay: false,\n            playToggle: {},\n            progressControl: {},\n            fullscreenToggle: {},\n            volumeMenuButton: {\n              inline: false,\n              vertical: true\n            }\n          },\n          techOrder: ['html5'],\n          plugins: {}\n        })\n      },\n      globalEvents: {\n        type: Array,\n        default: () => []\n      }\n    },\n    data() {\n      return {\n        player: null,\n        reseted: true\n      }\n    },\n    mounted() {\n      if (!this.player) { \n        this.initialize()\n      }\n    },\n    beforeDestroy() {\n      if (this.player) { \n        this.dispose()\n      }\n    },\n    methods: {\n      initialize() {\n\n        // videojs options\n        const videoOptions = Object.assign({}, this.globalOptions, this.options)\n\n        // ios fullscreen\n        if (this.playsinline) {\n          this.$refs.video.setAttribute('playsinline', this.playsinline)\n          this.$refs.video.setAttribute('webkit-playsinline', this.playsinline)\n          this.$refs.video.setAttribute('x5-playsinline', this.playsinline)\n          this.$refs.video.setAttribute('x5-video-player-type', 'h5')\n          this.$refs.video.setAttribute('x5-video-player-fullscreen', false)\n        }\n\n        // cross origin\n        if (this.crossOrigin !== '') {\n          this.$refs.video.crossOrigin = this.crossOrigin\n          this.$refs.video.setAttribute('crossOrigin', this.crossOrigin)\n        }\n\n        // emit event\n        const emitPlayerState = (event, value) => {\n          if (event) {\n            this.$emit(event, this.player)\n          }\n          if (value) {\n            this.$emit(this.customEventName, { [event]: value })\n          }\n        }\n\n        // avoid error \"VIDEOJS: ERROR: Unable to find plugin: __ob__\"\n        if (videoOptions.plugins) {\n          delete videoOptions.plugins.__ob__\n        }\n\n        // videoOptions\n        // console.log('videoOptions', videoOptions)\n        \n        // player\n        const self = this\n        this.player = videojs(this.$refs.video, videoOptions, function() {\n\n          // events\n          const events = DEFAULT_EVENTS.concat(self.events).concat(self.globalEvents)\n\n          // watch events\n          const onEdEvents = {}\n          for (let i = 0; i < events.length; i++) {\n            if (typeof events[i] === 'string' && onEdEvents[events[i]] === undefined) {\n              (event => {\n                onEdEvents[event] = null\n                this.on(event, () => {\n                  emitPlayerState(event, true)\n                })\n              })(events[i])\n            }\n          }\n\n          // watch timeupdate\n          this.on('timeupdate', function() {\n            emitPlayerState('timeupdate', this.currentTime())\n          })\n\n          // player readied\n          self.$emit('ready', this)\n        })\n      },\n      dispose(callback) {\n        if (this.player && this.player.dispose) {\n          if (this.player.techName_ !== 'Flash') {\n            this.player.pause && this.player.pause()\n          }\n          this.player.dispose()\n          this.player = null\n          this.$nextTick(() => {\n            this.reseted = false\n            this.$nextTick(() => {\n              this.reseted = true\n              this.$nextTick(() => {\n                callback && callback()\n              })\n            })\n          })\n          /*\n          if (!this.$el.children.length) {\n            const video = document.createElement('video')\n            video.className = 'video-js'\n            this.$el.appendChild(video)\n          }\n          */\n        }\n      }\n    },\n    watch: {\n      options: {\n        deep: true,\n        handler(options, oldOptions) {\n          this.dispose(() => {\n            if (options && options.sources && options.sources.length) {\n              this.initialize()\n            }\n          })\n        }\n      }\n    }\n  }\n</script>\n"]}]}